===================
Framework Structure
===================

.. contents::

Directory Overview
==================

client
------
- Global client-side resources such as javascript files, css resources, etc

config
------
- Global configuration files such as database configurations or global options

modules
-------
- Module directory

pages
-----
- Static pages, such as the login or error page

server
------
- Server side scripts, such as login functions and global classes

templates
---------
- HTML templates for various pages

Framework flow
==============

Required Backend
----------------
The Dynamic Suite relies on Apache's rewrite engine for semantic URL's. Make sure
you set up your Apache virtual host as per the included vhost.conf found in the
**/apache** directory of the repository.

The framework also relies on a database backend to handle user's and permissions.
Make sure that you have set up a new database and executed the **create_tables.sql**
script found in the **/sql** directory of the repository

Page Loading
------------
When a user queries the Dynamic Suite from their browser, the framework takes some steps
to route the user to the proper page.

It begins with the **index.php** file within the root directory. This is where all modules
are rendered and loaded through. On every page load, a new instance of the class ``DSInstance``
is created. This is the main class of the application that contains much of the logic of how
things will flow.

The framework will use Apache's rewrite to look at the URL to see which module the user is
trying to get to and route them accordingly. The modules **login** and **error** are reserved
by the framework for the login and fatal error page.

Example of module loading:

- User queries ``ds.example.com/login`` and is routed to the ``login`` page
- User queries ``ds.example.com/no_module``, but the module ``no_module`` doesn't exist, so
  the user is routed to the ``login`` page.

When loading to specific modules, permissions and sessions are checked. These are generated by
the login function of the user. If no session or invalid permissions are found, they will be
redirected to the ``login`` page.

See **module development** for more information on page loading.


